#!/bin/zsh

# autoload colors zsh/terminfo
# if [[ "$terminfo[colors]" -ge 8 ]]; then
#     colors
# fi
# for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
#     eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
#     eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
#     (( count = $count + 1 ))
# done
# PR_NO_COLOR="%{$terminfo[sgr0]%}"
# PS1="${PR_BLUE}[%2~]$PR_NO_COLOR %(!.#.$) "
# RPS1="$PR_MAGENTA$(get_git_prompt_info) (%D{%m-%d %H:%M})$PR_NO_COLOR"

#! /bin/zsh
#
# vi-mode colour changing
#   http://www.zsh.org/mla/users/2006/msg01196.html

setopt prompt_subst
autoload colors
colors

rst="%{%b%s%u$reset_color%}"
bgc="%{%(?.$rst.%S)%}"

function lprompt {
    local col1 col2 ch1 ch2
    col1="%{%b$fg[$2]%}"
    col2="%{$4$fg[$3]%}"
    ch1=$col1${1[1]}
    ch2=$col1${1[2]}
    titlebar=$'%{\e]0;%d\a%}'
    
    PROMPT="\
$titlebar\
$bgc$ch1\
$bgc$col2%B%2~%b\
$ch2$rst \
$col2%(!.â˜¢.âœ½)$rst "
}

function _rprompt_dir {
    local col_b col_s
    git_p=${$(get_git_prompt_info '%d')%% }
    col_p="%{$fg[yellow]%}"

    local short
    short="${PWD/$HOME/~}"

    if test -z "$git_p" ; then
            # echo -n "$short"
            return
    fi

    local lead rest
    lead=$git_p
    rest=${${short#$lead}#/}

    # echo -n "$lead$col_p/$rest"
    echo -n "$lead"
}

function rprompt {
    local col1 col2 ch1 ch2
    col1="%{$fg[$2]%}"
    col2="%{$4$fg[$3]%}"
    ch1=$col1${1[1]}
    ch2=$col1${1[2]}

    local _dir='$(_rprompt_dir)'

    local git_b git_s col_b col_s
    git_b='$(get_git_prompt_info '%b')'
    git_s='$(get_git_prompt_info '%s')'
    col_b="%{$fg[green]%}"
    col_s="%{$fg[red]%}"

#     RPROMPT="\
# $rst$ch1\
# $col2%n@%m\
# $col1:\
# $col2%B$_dir%b\
# $ch2$rst"
    RPROMPT="\
$rst$ch1\
$col_b$git_s\
$col_s$git_b\
$col2%B$_dir%b\
$ch2$rst"
}

if [ $UID -eq 0 ]; then
    PROMPT="$bgc%{%B$fg[red]%}[%{$fg[red]%}%n %m%{$fg[bold]%}]$rst "
    RPROMPT="$rst%{$fg[red]%}(%B%{$fg[red]%}%~%b%{$fg[red]%})$rst "
fi

lprompt '[]' bold blue
rprompt '()' bold magenta

unset rst bgc

# if [[ "$TERM" != "linux" ]]; then
# 
#   # this updates title bar before prompt is printed
#   precmd () {
#     echo  -n \\033\]2\;$USER@$HOST:$_\\07; 
#   }
# 
#   # this updates title bar while command is running
#   xterm-accept-line () { print -nr -- "]2;$BUFFER"; zle .accept-line; }
#   zle -N accept-line xterm-accept-line
# 
# fi #TERM


# ------------------------
#       PS1=$'%{\e[34;1m%}%20>..>%1~%>>>%{\e[0m%}'
#
#       function zle-keymap-select {
#               PS1=${${1/vicmd/$'%{\e[31;1m%}'}/(viins|main)/$'%{\e[34;1m%}'}${PS1#*%\}}
#               zle reset-prompt
#       }


# ------------------------
#       function zle-line-init zle-keymap-select {
#               RPS1="${${KEYMAP/vicmd/-- NORMAL --}/(main|viins)/-- INSERT --}"
#               RPS2=$RPS1
#               RPS3=$RPS1
#               RPS4=$RPS1
#               zle reset-prompt
#       }
#       zle -N zle-line-init
